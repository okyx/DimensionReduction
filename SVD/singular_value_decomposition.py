# -*- coding: utf-8 -*-
"""Singular Value Decomposition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fEJr9C3qIouB4hsrp6Fzb6_qc4EM9bl1
"""

import pandas as pd
import numpy as np

np.set_printoptions(precision=4)

data = pd.read_csv('https://raw.githubusercontent.com/okyx/clustering/master/Iris.csv')

data.columns=['Id',0,1,2,3,'Species']

data

Y = data.pop('Species')
X = data[[0,1,2,3]]

Y = Y.map({'Iris-setosa':1,'Iris-virginica':3,'Iris-versicolor':2})

X

U = X @ X.T
V= X.T @ X

U

eigvalU , eigvecU = np.linalg.eig(U)

eigvecU

eigvalV , eigvecV = np.linalg.eig(V)

sort_indices = np.argsort(eigvalU)[::-1]

num_component=2

com_indices = sort_indices[:num_component]

com_indices

S = np.zeros((eigvecU.shape[1],com_indices.shape[0]))

S.shape

eigvecUs = eigvecU[:,com_indices]

eigvecVs = eigvecV[:,com_indices]

S[:com_indices.shape[0],:com_indices.shape[0]] = np.diag(eigvalU[com_indices]**0.5)

construct = eigvecU @ S

import matplotlib.pyplot as plt

construct.shape

Y.shape

plt.scatter(construct[:,0],construct[:,1],c=Y)

"""OR"""

transformleft = X @ np.linalg.inv(eigvecV.T)

transformleft = transformleft.values

plt.scatter(transformleft[:,0],transformleft[:,1]*-1,c=Y)

from sklearn.decomposition import TruncatedSVD

svd = TruncatedSVD(n_components=2)

transformsk = svd.fit_transform(X)

plt.scatter(transformsk[:,0],transformsk[:,1]*-1,c=Y)